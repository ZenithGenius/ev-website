/*! For license information please see 997.min.js.LICENSE.txt */
(this.webpackChunk_tsparticles_path_perlin_noise=this.webpackChunk_tsparticles_path_perlin_noise||[]).push([[997],{997:(t,e,s)=>{s.d(e,{PerlinNoiseGenerator:()=>h});var i=s(533),o=s(551);const n=2*Math.PI,r={draw:!1,size:20,increment:.004,columns:0,rows:0,width:0,height:0,factor:{angle:.02,length:.01},offset:{x:4e4,y:4e4}};class h{constructor(){this._calculateField=()=>{const{field:t,noiseGen:e,options:s}=this,i=s.factor.length,o=s.factor.angle;for(let r=0;r<s.columns;r++){const h=t[r];for(let t=0;t<s.rows;t++){const a=h[t];a.length=e.noise3d(r*i+s.offset.x,t*i+s.offset.y,this.noiseZ),a.angle=e.noise3d(r*o,t*o,this.noiseZ)*n}}},this._drawField=t=>{const{field:e,options:s}=this;for(let i=0;i<s.columns;i++){const o=e[i];for(let e=0;e<s.rows;e++){const s=o[e],{angle:n,length:r}=s;t.setTransform(1,0,0,1,i*this.options.size,e*this.options.size),t.rotate(n),t.strokeStyle="white",t.beginPath(),t.moveTo(0,0),t.lineTo(0,this.options.size*r),t.stroke(),t.setTransform(1,0,0,1,0,0)}}},this._initField=()=>{const{columns:t,rows:e}=this.options;this.field=new Array(t);for(let s=0;s<t;s++){this.field[s]=new Array(e);for(let t=0;t<e;t++)this.field[s][t]=i.Vector.origin}},this.noiseGen=new o.PerlinNoise,this.field=[],this.noiseZ=0,this.options=(0,i.deepExtend)({},r)}generate(t){const e=t.getPosition(),{size:s}=this.options,o=Math.max(Math.floor(e.x/s),0),n=Math.max(Math.floor(e.y/s),0),{field:r}=this;return Promise.resolve(r?.[o]?.[n]?r[o][n].copy():i.Vector.origin)}async init(t){this.container=t,this._setup(),await Promise.resolve()}reset(){}update(){this.container&&(this._calculateField(),this.noiseZ+=this.options.increment,this.options.draw&&this.container.canvas.draw((t=>this._drawField(t))))}_resetField(){const t=this.container;if(!t)return;const e=t.actualOptions.particles.move.path.options,{options:s}=this;s.size=e.size>0?e.size:r.size,s.increment=e.increment>0?e.increment:r.increment,s.draw=!!e.draw;const o=e.offset;s.offset.x=o?.x??r.offset.x,s.offset.y=o?.y??r.offset.y;const n=e.factor;s.factor.angle=n?.angle??r.factor.angle,s.factor.length=n?.length??r.factor.length,s.width=t.canvas.size.width,s.height=t.canvas.size.height,this.options.seed=e.seed,this.noiseGen.seed(this.options.seed??(0,i.getRandom)()),s.columns=Math.floor(this.options.width/this.options.size)+1,s.rows=Math.floor(this.options.height/this.options.size)+1,this._initField()}_setup(){this.noiseZ=0,this._resetField(),window.addEventListener("resize",(()=>this._resetField()))}}}}]);