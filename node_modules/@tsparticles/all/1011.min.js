/*! For license information please see 1011.min.js.LICENSE.txt */
(this.webpackChunk_tsparticles_all=this.webpackChunk_tsparticles_all||[]).push([[1011],{1011:(e,t,i)=>{i.d(t,{ParticlesInfecter:()=>s});var n=i(3624);class s extends n.$S{constructor(e){super(e)}clear(){}init(){}async interact(e,t){const i=this.container.infecter;if(!i)return;if(i.updateInfection(e,t.value),void 0===e.infection?.stage)return;const s=this.container,a=s.actualOptions.infection;if(!a?.enable||a.stages.length<1)return;const c=a.stages[e.infection.stage],o=s.retina.pixelRatio,r=2*e.getRadius()+c.radius*o,f=e.getPosition(),g=c.infectedStage??e.infection.stage,l=s.particles.quadTree.queryCircle(f,r),u=c.rate,d=l.length;for(const t of l){const s=t;if(!(s===e||s.destroyed||s.spawning||void 0!==s.infection?.stage&&s.infection.stage===e.infection.stage||(0,n.sZ)()>=u/d))if(void 0===s.infection?.stage)i.startInfection(s,g);else if(s.infection.stage<e.infection.stage)i.updateInfectionStage(s,g);else if(s.infection.stage>e.infection.stage){const t=a.stages[s.infection.stage],n=t?.infectedStage??s.infection.stage;i.updateInfectionStage(e,n)}}await Promise.resolve()}isEnabled(){return this.container.actualOptions?.infection?.enable??!1}reset(){}}}}]);