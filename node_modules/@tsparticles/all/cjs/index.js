"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadAll = void 0;
async function loadAll(engine, refresh = true) {
    const { initPjs } = await Promise.resolve().then(() => __importStar(require("@tsparticles/pjs"))), { loadFull } = await Promise.resolve().then(() => __importStar(require("tsparticles"))), { loadHsvColorPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-hsv-color"))), { loadEasingBackPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-easing-back"))), { loadEasingCircPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-easing-circ"))), { loadEasingCubicPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-easing-cubic"))), { loadEasingExpoPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-easing-expo"))), { loadEasingLinearPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-easing-linear"))), { loadEasingQuartPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-easing-quart"))), { loadEasingQuintPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-easing-quint"))), { loadEasingSinePlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-easing-sine"))), { loadEmittersShapeCanvas } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-emitters-shape-canvas"))), { loadEmittersShapePath } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-emitters-shape-path"))), { loadEmittersShapePolygon } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-emitters-shape-polygon"))), { loadCanvasMaskPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-canvas-mask"))), { loadInfectionPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-infection"))), { loadMotionPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-motion"))), { loadPolygonMaskPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-polygon-mask"))), { loadSoundsPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-sounds"))), { loadExportImagePlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-export-image"))), { loadExportJSONPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-export-json"))), { loadExportVideoPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-export-video"))), { loadExternalParticleInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-external-particle"))), { loadExternalPopInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-external-pop"))), { loadLightInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-light"))), { loadParticlesRepulseInteraction } = await Promise.resolve().then(() => __importStar(require("@tsparticles/interaction-particles-repulse"))), { loadGradientUpdater } = await Promise.resolve().then(() => __importStar(require("@tsparticles/updater-gradient"))), { loadOrbitUpdater } = await Promise.resolve().then(() => __importStar(require("@tsparticles/updater-orbit"))), { loadCurvesPath } = await Promise.resolve().then(() => __importStar(require("@tsparticles/path-curves"))), { loadCurlNoisePath } = await Promise.resolve().then(() => __importStar(require("@tsparticles/path-curl-noise"))), { loadPerlinNoisePath } = await Promise.resolve().then(() => __importStar(require("@tsparticles/path-perlin-noise"))), { loadPoissonDiscPlugin } = await Promise.resolve().then(() => __importStar(require("@tsparticles/plugin-poisson-disc"))), { loadPolygonPath } = await Promise.resolve().then(() => __importStar(require("@tsparticles/path-polygon"))), { loadSVGPath } = await Promise.resolve().then(() => __importStar(require("@tsparticles/path-svg"))), { loadZigZagPath } = await Promise.resolve().then(() => __importStar(require("@tsparticles/path-zig-zag"))), { loadSimplexNoisePath } = await Promise.resolve().then(() => __importStar(require("@tsparticles/path-simplex-noise"))), { loadBubbleEffect } = await Promise.resolve().then(() => __importStar(require("@tsparticles/effect-bubble"))), { loadArrowShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-arrow"))), { loadCardsShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-cards"))), { loadCogShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-cog"))), { loadHeartShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-heart"))), { loadPathShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-path"))), { loadRoundedPolygonShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-rounded-polygon"))), { loadRoundedRectShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-rounded-rect"))), { loadSpiralShape } = await Promise.resolve().then(() => __importStar(require("@tsparticles/shape-spiral"))), { loadTrailEffect } = await Promise.resolve().then(() => __importStar(require("@tsparticles/effect-trail")));
    initPjs(engine);
    await loadFull(engine, false);
    await loadHsvColorPlugin();
    await loadEasingBackPlugin();
    await loadEasingCircPlugin();
    await loadEasingCubicPlugin();
    await loadEasingExpoPlugin();
    await loadEasingLinearPlugin();
    await loadEasingQuartPlugin();
    await loadEasingQuintPlugin();
    await loadEasingSinePlugin();
    await loadEmittersShapeCanvas(engine, false);
    await loadEmittersShapePath(engine, false);
    await loadEmittersShapePolygon(engine, false);
    await loadHsvColorPlugin();
    await loadCanvasMaskPlugin(engine, false);
    await loadInfectionPlugin(engine, false);
    await loadMotionPlugin(engine, false);
    await loadPolygonMaskPlugin(engine, false);
    await loadSoundsPlugin(engine, false);
    await loadExportImagePlugin(engine, false);
    await loadExportJSONPlugin(engine, false);
    await loadExportVideoPlugin(engine, false);
    await loadExternalParticleInteraction(engine, false);
    await loadExternalPopInteraction(engine, false);
    await loadLightInteraction(engine, false);
    await loadParticlesRepulseInteraction(engine, false);
    await loadGradientUpdater(engine, false);
    await loadOrbitUpdater(engine, false);
    await loadCurvesPath(engine, false);
    await loadCurlNoisePath(engine, false);
    await loadPerlinNoisePath(engine, false);
    await loadPoissonDiscPlugin(engine, false);
    await loadPolygonPath(engine, false);
    await loadSVGPath(engine, false);
    await loadZigZagPath(engine, false);
    await loadSimplexNoisePath(engine, false);
    await loadBubbleEffect(engine, false);
    await loadArrowShape(engine, false);
    await loadCardsShape(engine, false);
    await loadCogShape(engine, false);
    await loadHeartShape(engine, false);
    await loadPathShape(engine, false);
    await loadRoundedPolygonShape(engine, false);
    await loadRoundedRectShape(engine, false);
    await loadSpiralShape(engine, false);
    await loadTrailEffect(engine, false);
    await engine.refresh(refresh);
}
exports.loadAll = loadAll;
