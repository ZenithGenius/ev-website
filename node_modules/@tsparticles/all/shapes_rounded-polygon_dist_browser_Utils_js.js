/*!
 * Author : Matteo Bruni
 * MIT license: https://opensource.org/licenses/MIT
 * Demo / Generator : https://particles.js.org/
 * GitHub : https://www.github.com/matteobruni/tsparticles
 * How to use? : Check the GitHub README
 * v3.2.1
 */
"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(this["webpackChunk_tsparticles_all"] = this["webpackChunk_tsparticles_all"] || []).push([["shapes_rounded-polygon_dist_browser_Utils_js"],{

/***/ "../../shapes/rounded-polygon/dist/browser/Utils.js":
/*!**********************************************************!*\
  !*** ../../shapes/rounded-polygon/dist/browser/Utils.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   polygon: () => (/* binding */ polygon),\n/* harmony export */   roundedPath: () => (/* binding */ roundedPath)\n/* harmony export */ });\nconst double = 2,\n  doublePI = Math.PI * double,\n  half = 0.5,\n  defaultRotation = 0;\nfunction polygon(sides, radius, rot = defaultRotation) {\n  const step = doublePI / sides,\n    path = [];\n  for (let i = 0; i < sides; i++) {\n    path.push({\n      x: Math.cos(i * step + rot) * radius,\n      y: Math.sin(i * step + rot) * radius\n    });\n  }\n  return path;\n}\nfunction roundedPath(context, path, radius) {\n  const index1 = 0,\n    index2 = 1,\n    increment = 1;\n  let p1 = path[index1],\n    p2 = path[index2];\n  const len = path.length;\n  context.moveTo((p1.x + p2.x) * half, (p1.y + p2.y) * half);\n  for (let i = 1; i <= len; i++) {\n    p1 = p2;\n    p2 = path[(i + increment) % len];\n    context.arcTo(p1.x, p1.y, (p1.x + p2.x) * half, (p1.y + p2.y) * half, radius);\n  }\n}\n\n//# sourceURL=webpack://@tsparticles/all/../../shapes/rounded-polygon/dist/browser/Utils.js?");

/***/ })

}]);