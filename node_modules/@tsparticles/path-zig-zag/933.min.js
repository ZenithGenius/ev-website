/*! For license information please see 933.min.js.LICENSE.txt */
(this.webpackChunk_tsparticles_path_zig_zag=this.webpackChunk_tsparticles_path_zig_zag||[]).push([[933],{933:(t,e,a)=>{a.d(e,{ZigZagPathGenerator:()=>n});var i=a(533);const o=.5*Math.PI;class n{constructor(){this.options={waveHeight:{min:0,max:3},waveLength:{min:0,max:5}}}generate(t,e){void 0===t.zigzag&&(t.zigzag={counter:(0,i.getRandom)(),waveHeight:(0,i.getRangeValue)(this.options.waveHeight),waveLength:(0,i.getRangeValue)(this.options.waveLength)});const a=.5/t.zigzag.waveLength*e.factor;t.zigzag.counter+=a;const n=t.zigzag.waveHeight*Math.sin(t.zigzag.counter);return t.position.x+=n*Math.cos(t.velocity.angle+o),t.position.y+=n*Math.sin(t.velocity.angle+o),Promise.resolve(i.Vector.origin)}async init(t){const e=t.actualOptions.particles.move.path.options;this.options.waveLength=e.waveLength??this.options.waveLength,this.options.waveHeight=e.waveHeight??this.options.waveHeight,await Promise.resolve()}reset(){}update(){}}}}]);