var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "@tsparticles/engine"], factory);
    }
})(function (require, exports) {
    "use strict";
    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CurvesPathGenerator = void 0;
    const engine_1 = require("@tsparticles/engine");
    const double = 2, doublePI = Math.PI * double;
    function randomVelocity() {
        const offset = 0.8, factor = 0.6;
        return (0, engine_1.getRandom)() * factor + offset;
    }
    class CurvesPathGenerator {
        constructor() {
            this.options = {
                rndFunc: null,
                period: 100,
                nbHarmonics: 2,
                attenHarmonics: 0.8,
                lowValue: -0.03,
                highValue: 0.03,
            };
        }
        async generate(p) {
            if (!p.pathGen) {
                const options = this.options, { CurvesPathGen } = await (__syncRequire ? Promise.resolve().then(() => __importStar(require("./Curves.js"))) : new Promise((resolve_1, reject_1) => { require(["./Curves.js"], resolve_1, reject_1); }).then(__importStar));
                p.pathGen = CurvesPathGen(options.rndFunc, options.period, options.nbHarmonics, options.attenHarmonics, options.lowValue, options.highValue);
            }
            if (!p.curveVelocity) {
                p.curveVelocity = engine_1.Vector.origin;
                p.curveVelocity.length = randomVelocity();
                p.curveVelocity.angle = (0, engine_1.getRandom)() * doublePI;
            }
            else {
                p.curveVelocity.length += 0.01;
                p.curveVelocity.angle = (p.curveVelocity.angle + p.pathGen()) % doublePI;
            }
            p.velocity.x = 0;
            p.velocity.y = 0;
            return p.curveVelocity;
        }
        async init(container) {
            const sourceOptions = container.actualOptions.particles.move.path.options, { options } = this;
            if ((0, engine_1.isFunction)(sourceOptions.rndFunc)) {
                options.rndFunc = sourceOptions.rndFunc;
            }
            else if ((0, engine_1.isString)(sourceOptions.rndFunc)) {
                options.rndFunc =
                    window[sourceOptions.rndFunc] ?? this.options.rndFunc;
            }
            options.period = sourceOptions.period ?? options.period;
            options.nbHarmonics = sourceOptions.nbHarmonics ?? options.nbHarmonics;
            options.attenHarmonics = sourceOptions.attenHarmonics ?? options.attenHarmonics;
            options.lowValue = sourceOptions.lowValue ?? options.lowValue;
            options.highValue = sourceOptions.highValue ?? options.highValue;
            await Promise.resolve();
        }
        reset(particle) {
            delete particle.pathGen;
            delete particle.curveVelocity;
        }
        update() {
        }
    }
    exports.CurvesPathGenerator = CurvesPathGenerator;
});
